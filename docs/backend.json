{
  "entities": {
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project showcased in the portfolio.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the project."
        },
        "title": {
          "type": "string",
          "description": "Title of the project."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the project."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the project's image or video.",
          "format": "uri"
        },
        "liveDemoUrl": {
          "type": "string",
          "description": "URL to the live demo of the project.",
          "format": "uri"
        },
        "technologies": {
          "type": "array",
          "description": "List of technologies used in the project.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "imageUrl",
        "liveDemoUrl",
        "technologies"
      ]
    },
    "ContactMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContactMessage",
      "type": "object",
      "description": "Represents a contact message received through the portfolio's contact form.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the contact message."
        },
        "name": {
          "type": "string",
          "description": "Name of the person sending the message."
        },
        "email": {
          "type": "string",
          "description": "Email address of the person sending the message.",
          "format": "email"
        },
        "message": {
          "type": "string",
          "description": "The message content."
        },
        "sentAt": {
          "type": "string",
          "description": "Timestamp indicating when the message was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "message",
        "sentAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project information. Each project document contains details such as title, description, image URL, live demo URL, and technologies used. No denormalized authorization fields are required as all projects are publicly accessible for listing.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            }
          ]
        }
      },
      {
        "path": "/contact_messages/{messageId}",
        "definition": {
          "entityName": "ContactMessage",
          "schema": {
            "$ref": "#/backend/entities/ContactMessage"
          },
          "description": "Stores contact messages received from the contact form. Each message includes the sender's name, email, message content, and timestamp.  Access to this collection should be restricted to authorized personnel (e.g., site administrators). No denormalized authorization fields are required.",
          "params": [
            {
              "name": "messageId",
              "description": "The unique identifier for the contact message."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to manage projects and contact messages for a portfolio website. It emphasizes security and simplicity in rules. Projects are stored in a top-level `/projects` collection. Contact messages are stored in a `/contact_messages` collection. This approach simplifies security rules and querying. There is no ownership or user-specific data, so there is no need to create collections inside the `/users/{userId}` collection.\n\nAuthorization Independence: This design achieves authorization independence because there's no reliance on parent document data for subcollection access.  Each collection stands alone, simplifying rules and enabling atomic operations. No denormalization is needed, given no user-specific data or complex access control.\n\nQAPs Support: The structure supports secure `list` operations by segregating data into collections with homogeneous security postures. The `projects` collection contains public project data, and the `contact_messages` collection is secured for admin access (if implemented).\n"
  }
}